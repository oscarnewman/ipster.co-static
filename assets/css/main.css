/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
@import url(http://fonts.googleapis.com/css?family=Oswald:400,700,300&subset=latin,latin-ext);
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
html {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%; }

body {
  margin: 0; }

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

audio,
canvas,
progress,
video {
  display: inline-block;
  vertical-align: baseline; }

audio:not([controls]) {
  display: none;
  height: 0; }

[hidden],
template {
  display: none; }

a {
  background-color: transparent; }

a:active,
a:hover {
  outline: 0; }

abbr[title] {
  border-bottom: 1px dotted; }

b,
strong {
  font-weight: bold; }

dfn {
  font-style: italic; }

h1 {
  font-size: 2em;
  margin: 0.67em 0; }

mark {
  background: #ff0;
  color: #000; }

small {
  font-size: 80%; }

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

img {
  border: 0; }

svg:not(:root) {
  overflow: hidden; }

figure {
  margin: 1em 40px; }

hr {
  box-sizing: content-box;
  height: 0; }

pre {
  overflow: auto; }

code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

button,
input,
optgroup,
select,
textarea {
  color: inherit;
  font: inherit;
  margin: 0; }

button {
  overflow: visible; }

button,
select {
  text-transform: none; }

button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer; }

button[disabled],
html input[disabled] {
  cursor: default; }

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

input {
  line-height: normal; }

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  padding: 0; }

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

input[type="search"] {
  -webkit-appearance: textfield;
  box-sizing: content-box; }

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

legend {
  border: 0;
  padding: 0; }

textarea {
  overflow: auto; }

optgroup {
  font-weight: bold; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

* {
  box-sizing: border-box; }

body {
  background-color: #F4F4F4;
  font-size: 14px;
  line-height: 1.6;
  font-family: "Oswald", sans-serif;
  color: #666;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: 100%; }

::-moz-selection {
  background: #FFF498; }

::selection {
  background: #FFF498; }

::-moz-selection {
  background: #FFF498; }

img::-moz-selection {
  background: transparent; }

img::selection {
  background: transparent; }

img::-moz-selection {
  background: transparent; }

body {
  -webkit-tap-highlight-color: #FFF498; }

a {
  color: #0074D9;
  text-decoration: none;
  outline: 0; }
  a:hover, a:focus {
    color: #40a6ff; }

.gigantic, .huge, .large, .bigger, .big,
h1, h2, h3, h4, h5, h6 {
  color: #222;
  font-weight: bold; }

.gigantic {
  font-size: 110px;
  line-height: 1.09;
  letter-spacing: -2px; }

.huge, h1 {
  font-size: 68px;
  line-height: 1.05;
  letter-spacing: -1px; }

.large, h2 {
  font-size: 42px;
  line-height: 1.14; }

.bigger, h3 {
  font-size: 26px;
  line-height: 1.38; }

.big, h4 {
  font-size: 22px;
  line-height: 1.38; }

.small, small {
  font-size: 10px;
  line-height: 1.2; }

p {
  margin: 0 0 20px 0; }

em {
  font-style: italic; }

strong {
  font-weight: bold; }

hr {
  border: solid #ddd;
  border-width: 1px 0 0;
  clear: both;
  margin: 10px 0 30px;
  height: 0; }

nav {
  height: 70px;
  background-image: -webkit-linear-gradient(#F2E71D, #F0E50B);
  background-image: linear-gradient(#F2E71D, #F0E50B); }
  nav section {
    display: inline-block; }
    nav section.nav-right {
      float: right; }
  nav a {
    line-height: 70px;
    padding: 0 20px;
    color: rgba(0, 0, 0, 0.5);
    font-size: 18px;
    font-weight: bold;
    display: inline-block;
    vertical-align: middle;
    border-right: solid rgba(173, 173, 173, 0.3) 1px; }
    nav a:hover, nav a:active, nav a:focus {
      color: rgba(0, 0, 0, 0.8); }
  nav a.logo {
    opacity: 0.9; }
    nav a.logo img {
      margin-top: -5px;
      height: 25px;
      width: auto;
      display: inline-block;
      vertical-align: middle; }
  nav a.facebook {
    text-transform: lowercase;
    background-image: -webkit-linear-gradient(#3B5998, #35508E);
    background-image: linear-gradient(#3B5998, #35508E);
    color: white;
    padding: 0 30px; }
    nav a.facebook:hover, nav a.facebook:active, nav a.facebook:focus {
      background: #3B5998; }

section.photo-section {
  padding: 0 30px; }
  section.photo-section h1 {
    font-weight: 100;
    text-transform: uppercase;
    color: #D0021B;
    font-size: 36px; }
    section.photo-section h1 strong {
      font-weight: 400; }
  section.photo-section .posts {
    list-style-type: none;
    padding: 0;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -webkit-flex-direction: row;
        -ms-flex-direction: row;
            flex-direction: row;
    *zoom: 1; }
    section.photo-section .posts:before, section.photo-section .posts:after {
      content: '';
      display: table; }
    section.photo-section .posts:after {
      clear: both; }
    section.photo-section .posts li {
      background: white;
      box-shadow: 0px 2px 2px 0px rgba(37, 37, 37, 0.44);
      border-radius: 5px;
      overflow: hidden;
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 100%;
      margin-left: 0%;
      margin-right: 3%; }
      section.photo-section .posts li:before, section.photo-section .posts li:after {
        content: '';
        display: table; }
      section.photo-section .posts li:after {
        clear: both; }
      section.photo-section .posts li:last-child {
        margin-right: 0%; }
      section.photo-section .posts li.more {
        *zoom: 1;
        float: left;
        clear: none;
        text-align: inherit;
        width: 27.9%;
        margin-left: 0%;
        margin-right: 3%;
        background-image: -webkit-linear-gradient(-180deg, #E93A50 0%, #D03548 100%);
        background-image: -webkit-linear-gradient(270deg, #E93A50 0%, #D03548 100%);
        background-image: linear-gradient(-180deg, #E93A50 0%, #D03548 100%);
        box-shadow: 0px 4px 0px 0px #A70E21;
        border-radius: 5px;
        display: -webkit-box;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: center;
        -webkit-justify-content: center;
            -ms-flex-pack: center;
                justify-content: center;
        -webkit-box-align: center;
        -webkit-align-items: center;
            -ms-flex-align: center;
                align-items: center; }
        section.photo-section .posts li.more:before, section.photo-section .posts li.more:after {
          content: '';
          display: table; }
        section.photo-section .posts li.more:after {
          clear: both; }
        section.photo-section .posts li.more:last-child {
          margin-right: 0%; }
        section.photo-section .posts li.more a {
          color: white;
          text-transform: uppercase;
          font-size: 22px;
          padding: 10px;
          text-align: center; }
      section.photo-section .posts li a {
        display: block; }
      section.photo-section .posts li h2 {
        font-size: 16px;
        font-weight: 400;
        padding: 5px 10px 0 10px; }
      section.photo-section .posts li img {
        width: 100%;
        height: auto;
        margin: 0;
        padding: 0;
        display: block; }
